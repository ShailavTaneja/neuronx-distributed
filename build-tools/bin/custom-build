#!/bin/bash -xe

# Obtain build path from brazil
BUILD_PATH=$(brazil-path package-build-root)

# `bb clean` logic
if [ "$1" == "clean" ]; then
    rm -rf ${BUILD_PATH}/bdist.* ${BUILD_PATH}/pip ${BUILD_PATH}/python3.*
    env TOOL_VERBOSE=true python-3p-tool "$@"
    exit
fi

# Obtain src/runtimefarm paths from brazil
SRC_PATH=$(brazil-path package-src-root)
RUNTIMEFARM_PATH=$(brazil-path tooldirect.runtimefarm)
LICENSE_TXT_PATH=$(brazil-path [NeuronLicense]pkg.src)/LICENSE.txt

FIRST_TORCH_XLA=$(ls ${RUNTIMEFARM_PATH}/pip/public/torch-xla/ | head -n 1)
TORCH_XLA_VERSION=${FIRST_TORCH_XLA#*-}
export TORCH_XLA_VERSION=${TORCH_XLA_VERSION%%-*}
export PYTORCH_VERSION=$(echo ${TORCH_XLA_VERSION} | cut -d "." -f 1,2 )

# Create NeuronxDistributed build folder
BUILD_PATH_NEURONX_DISTRIBUTED=${BUILD_PATH}/public/NeuronxDistributed
mkdir -p ${BUILD_PATH_NEURONX_DISTRIBUTED}

# Copy Python source files
cp ${SRC_PATH}/setup.py ${BUILD_PATH_NEURONX_DISTRIBUTED}/
cp -r ${SRC_PATH}/src ${BUILD_PATH_NEURONX_DISTRIBUTED}/

# Run Python3PBuildTool build
env TOOL_VERBOSE=true python-3p-tool "$@"

# Copy neuronx-distributed build folder to site-packages
PYVER=$(python -c 'from sys import version_info as vi; print(f"{vi.major}.{vi.minor}")')
SITE_PACKAGES_SUFFIX="lib/python${PYVER}/site-packages"
cp -r ${BUILD_PATH_NEURONX_DISTRIBUTED}/src/ ${BUILD_PATH}/${SITE_PACKAGES_SUFFIX}/

# Build wheel
cd ${BUILD_PATH_NEURONX_DISTRIBUTED}
cp ${LICENSE_TXT_PATH} ${BUILD_PATH_NEURONX_DISTRIBUTED}/src/
export PYTHONPATH=${RUNTIMEFARM_PATH}/${SITE_PACKAGES_SUFFIX}
DIST_DIR=${BUILD_PATH}/pip/public/neuronx-distributed
python setup.py bdist_wheel --dist-dir ${DIST_DIR}
